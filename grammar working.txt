/*
CFG for PL
Written in the format that can be checked on http://smlweb.cpsc.ucalgary.ca/ and http://mdaines.github.io/grammophone/

Terminals are written with a lowercase, number, or punctuation at the start
non terminals start with uppercase letters, and then any legal characters
Start symbol is the first one written
Separate right hand side with spaces, terminate with a period

Note : the tool doesn't allow for some punctuation so all punctuation will be written out
:=	assign
[	leftBracket
[	rightBracket
[]	guard
(	leftParen
)	rightParen
.	period
$	comment
=	equal
<	lessThan
>	greaterThan
*	times
/	divide
+	plus
-	minus
\	modulo
->	arrow
&	and
|	or
~	not

E is used to represent the empty string for easy reading
comments == /* */

*/

Program -> Block period .
Block -> begin DefinitionPart StatementPart end .

/* DefinitionPart -> { Definition ; } . */
DefinitionPart -> Definition ; DefinitionPart | E .

Definition -> ConstantDefinition | VariableDefinition | ProcedureDefinition .
ConstantDefinition -> const ConstantName equals Constant .

/* VariableDefinition -> TypeSymbol VariableList | TypeSymbol array VariableList leftBracket Constant rightBracket . */
VariableDefinition -> TypeSymbol VariableDefinitionA .
VariableDefinitionA -> VariableList | array VariableList leftBracket Constant rightBracket .


TypeSymbol -> integer | boolean .

/* VariableList -> VariableName { , VariableName } . */ 
VariableList -> VariableName VariableListA .
VariableListA -> comma VariableList | E .

ProcedureDefinition -> proc ProcedureName Block .

/* StatementPart -> { Statement ; } . */
StatementPart -> Statement ; StatementPart | E .

Statement -> EmptyStatement | ReadStatement | WriteStatement | AssignmentStatement | ProcedureStatement | IfStatement | DoStatement .
EmptyStatement -> skip .
ReadStatement -> read VariableAccessList .

/* VariableAccessList -> VariableAccess { , VariableAccess } . */
VariableAccessList -> VariableAccess VariableAccessListA .
VariableAccessListA -> comma VariableList | E .

WriteStatement -> write ExpressionList .

/* ExpressionList -> Expression { , Expression } .  */
ExpressionList -> Expression ExpressionListA .
ExpressionListA -> comma ExpressionList | E .

AssignmentStatement -> VariableAccessList assign ExpressionList.
ProcedureStatement -> call ProcedureName .
IfStatement -> if GuardedCommandList fi .
DoStatement -> do GuardedCommandList od .

/* GuardedCommandList -> GuardedCommand { guard GuardedCommand } . */
GuardedCommandList -> GuardedCommand GuardedCommandListA .
GuardedCommandListA -> guard GuardedCommandList | E .

/* Expression -> PrimaryExpression { PrimaryOperator PrimaryExpression } . */
Expression -> PrimaryExpression ExpressionA .
ExpressionA -> PrimaryOperator PrimaryExpression | E . 

PrimaryOperator -> and | or .

/* PrimaryExpression -> SimpleExpression [ RelationalOperator SimpleExpression ] . */
PrimaryExpression -> SimpleExpression PrimaryExpressionA .
PrimaryExpressionA -> RelationalOperator SimpleExpression | E .

RelationalOperator -> lessThan | greaterThan | equal .

/* SimpleExpression -> [ minus ] Term { AddingOperator Term } . */
SimpleExpression -> minus SimpleExpressionA | SimpleExpressionA .
SimpleExpressionA -> Term SimpleExpressionB .
SimpleExpressionB -> AddingOperator SimpleExpressionB | E .

AddingOperator -> plus | minus .

/* Term -> Factor { MultiplyingOperator Factor } . */
Term -> Factor TermA .
TermA -> MultiplyingOperator Term | E .

MultiplyingOperator -> times | divide | modulo . 
Factor -> Constant | VariableAccess | leftParen Expression rightParen | not Factor .

/* VariableAccess -> VariableName [ IndexedSelector ] . */
VariableAccess -> VariableName VariableNameA .
VariableNameA -> IndexedSelector | E .

IndexedSelector -> leftBracket Expression rightBracket .
Constant -> Numeral | BooleanSymbol | ConstantName .

/* Numeral -> Digit { Digit } . */
Numeral -> Digit NumeralA .
NumeralA -> Numeral | E .

BooleanSymbol -> false | true .

/* Name -> Letter { Letter | Digit | underscore } . */
Name -> Letter NameA .
NameA -> Letter NameA | Digit NameA | underscore NameA | E . 

Digit -> number .
Letter -> letter . /* obviously also capital letters in the real language */
E -> .